import { Slot } from "ask-sdk-model";
import { AttributeType } from "../enums/Attributetype";
import { InputWrapper } from "./InputWrapper";
import { Collection } from "../utils/Types";
export declare class Data extends InputWrapper {
    private static EMPTY_DEFAULT_VALUE;
    private static EMPTY_SLOT;
    slot(slotName: string): string;
    getSlots(): Collection<Slot>;
    hasSlot(slotName: string): boolean;
    getSlot(slotName: string, defaultValue?: any): Slot;
    requestAttr(attrName: string, value: any): this;
    getRequestAttrs(): any;
    setRequestAttrs(attrs: Collection<any>): this;
    hasRequestAttr(attrName: string[] | string): Collection<any> | false;
    getRequestAttr(attrName: string, defaultValue?: any): any;
    setRequestAttr(attrName: string, value: any): this;
    sessionAttr(attrName: string, value: any): this;
    getSessionAttrs(): any;
    setSessionAttrs(attrs: Collection<any>): this;
    hasSessionAttr(attrName: string[] | string): Collection<any> | false;
    getSessionAttr(attrName: string, defaultValue?: any): any;
    setSessionAttr(attrName: string, value: any): this;
    persistentAttr(attrName: string, value: any): this;
    persistentAttr(attrName: string): any;
    getPersistentAttrs(): Promise<Collection<any>>;
    setPersistentAttrs(attrs: Collection<any>): this;
    hasPersistentAttr(attrName: string[] | string): Promise<Collection<any> | false>;
    getPersistentAttr(attrName: string, defaultValue?: any): Promise<any>;
    setPersistentAttr(attrName: string, value: any): this;
    savePersistentAttrs(): Promise<void>;
    attr(type: AttributeType, attrName: string, value: any): this;
    getAttrs(type: AttributeType.PERSISTENT, useSessionCache?: boolean): Promise<Collection<any>>;
    getAttrs(type: AttributeType): Collection<any>;
    hasAttr(type: AttributeType.PERSISTENT, attrName: string[] | string, useSessionCache?: boolean): Promise<Collection<any> | false>;
    hasAttr(type: AttributeType, attrName: string[] | string): Collection<any> | false;
    getAttr(type: AttributeType.PERSISTENT, attrName: string[] | string, defaultValue?: any, useSessionCache?: boolean): Promise<any>;
    getAttr(type: AttributeType, attrName: string, defaultValue?: any): any;
    setAttr(type: AttributeType, attrName: string, value: any, useSessionCache?: boolean): this;
    setAttrs(type: AttributeType, attrs: Collection<any>): this;
    saveSlotsAsAttrs(attrType: AttributeType.PERSISTENT, slotName?: string[]): Promise<void>;
    saveSlotsAsAttrs(attrType: AttributeType, slotName?: string[]): void;
    swapAttrs(fromType: AttributeType, toType: AttributeType.PERSISTENT, attrName?: string[]): Promise<void>;
    swapAttrs(fromType: AttributeType.PERSISTENT, toType: AttributeType, attrName?: string[]): Promise<void>;
    swapAttrs(fromType: AttributeType, toType: AttributeType, attrName?: string[]): void;
    private filterAttr;
    fulfillString(str: string): string;
}
